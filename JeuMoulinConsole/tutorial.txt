Players take turns to play a piece of their own colour on any unoccupied point until all eighteen pieces have been played. 
After that, play continues alternately but each turn consists of a player moving one piece along a line to an adjacent empty point.

During each turn, whenever a player has three of their pieces in a line, they form a mill. 
That player then immediately removes from the board one piece belonging to the opponent that does not form part of a mill. 
If all of the opponent's pieces form mills, then the player is allowed to remove any one of the opponent's pieces. 
Players may break a mill by moving a piece out of it and then, in a subsequent turn, 
play the piece back again, thus forming a new mill and capturing another piece.
Captured pieces cannot be reclaimed and are out of the game.

When a player is reduced to three pieces they may then move to any vacant point on the board.

The player wins the game when either they reduced their opponent to two pieces or by leaving them without a legal move.
#include <stdio.h>
#include <stdlib.h>

#include "../include/grille.h"
#include "../include/game.h"
#include "../include/structure.h"

#include <stdio.h>
#include <stdlib.h>
#include <windows.h>


int main()
{
    etat e;
    for (int i=0;i<24;i++){
        e.P[i].lettre='a'+i;
    }
    e.P[0].joueur=0;e.P[1].joueur=0;e.P[2].joueur=0;
    e.P[3].joueur=0;e.P[4].joueur=0;e.P[5].joueur=0;
    e.P[6].joueur=0;e.P[7].joueur=0;e.P[8].joueur=0;
    e.P[9].joueur=0;e.P[10].joueur=0;e.P[11].joueur=0;
    e.P[12].joueur=0;e.P[13].joueur=0;e.P[14].joueur=0;
    e.P[15].joueur=0;e.P[16].joueur=0;e.P[17].joueur=0;
    e.P[18].joueur=0;e.P[19].joueur=0;e.P[20].joueur=0;
    e.P[21].joueur=0;e.P[22].joueur=0;e.P[23].joueur=0;
    //couleur des joueurs
    for (int i=0 ; i<24 ; i++ ){
        if(e.P[i].joueur == 1){
            e.P[i].couleur = 9;
        }else if( e.P[i].joueur == 2){
            e.P[i].couleur = 12;
        }else{
            e.P[i].couleur=0;
        }
    }
    //voisins
    e.P[0].v1='b';e.P[0].v2='j';e.P[0].v3='&';e.P[0].v4='&';
    e.P[1].v1='a';e.P[1].v2='c';e.P[1].v3='e';e.P[1].v4='&';
    e.P[2].v1='b';e.P[2].v2='o';e.P[2].v3='&';e.P[2].v4='&';
    e.P[3].v1='e';e.P[3].v2='k';e.P[3].v3='&';e.P[3].v4='&';
    e.P[4].v1='b';e.P[4].v2='d';e.P[4].v3='f';e.P[4].v4='h';
    e.P[5].v1='e';e.P[5].v2='n';e.P[5].v3='&';e.P[5].v4='&';
    e.P[6].v1='h';e.P[6].v2='l';e.P[6].v3='&';e.P[6].v4='&';
    e.P[7].v1='g';e.P[7].v2='e';e.P[7].v3='i';e.P[7].v4='&';
    e.P[8].v1='h';e.P[8].v2='m';e.P[8].v3='&';e.P[9].v4='&';
    e.P[9].v1='a';e.P[9].v2='k';e.P[9].v3='v';e.P[9].v4='&';
    e.P[10].v1='j';e.P[10].v2='d';e.P[10].v3='l';e.P[10].v4='s';
    e.P[11].v1='k';e.P[11].v2='g';e.P[11].v3='p';e.P[11].v4='&';
    e.P[12].v1='i';e.P[12].v2='n';e.P[12].v3='r';e.P[12].v4='&';
    e.P[13].v1='m';e.P[13].v2='f';e.P[13].v3='o';e.P[13].v4='u';
    e.P[14].v1='n';e.P[14].v2='c';e.P[14].v3='x';e.P[14].v4='&';
    e.P[15].v1='l';e.P[15].v2='q';e.P[15].v3='&';e.P[15].v4='&';
    e.P[16].v1='p';e.P[16].v2='r';e.P[16].v3='t';e.P[16].v4='&';
    e.P[17].v1='q';e.P[17].v2='m';e.P[17].v3='&';e.P[17].v4='&';
    e.P[18].v1='k';e.P[18].v2='t';e.P[18].v3='&';e.P[18].v4='&';
    e.P[19].v1='s';e.P[19].v2='q';e.P[19].v3='u';e.P[19].v4='w';
    e.P[20].v1='t';e.P[20].v2='n';e.P[20].v3='&';e.P[20].v4='&';
    e.P[21].v1='j';e.P[21].v2='w';e.P[21].v3='&';e.P[21].v4='&';
    e.P[22].v1='v';e.P[22].v2='t';e.P[22].v3='x';e.P[22].v4='&';
    e.P[23].v1='w';e.P[23].v2='o';e.P[23].v3='&';e.P[23].v4='&';

    e.pos1=9;
    e.pos2=9;

    BeginJeu(e);
    return 0;
}
#include <stdio.h>
#include <stdlib.h>
#include <windows.h>
#include<stdbool.h>

#include "../include/structure.h"
///trouver l'indice d'un pion sur la grille
int indice_pion(char c ,etat e)
{
    for (int i=0;i<24;i++)
        if (e.P[i].lettre==c)
            return i;
}

///v�rifie s'il n'y a pas de mouvement pour la machine
int pas_de_mouvement1(etat c){
    int i;
    int t1 = 0;
    for (i=0;i<24;i++){
        if (c.P[i].joueur==1){
            //int indice pion(char c);
            //la fonction donne l'indice de la case portant le caractere entree en indice.
            if ((c.P[indice_pion(c.P[i].v1 , c)].joueur!=0) && (c.P[indice_pion(c.P[i].v2,c)].joueur!=0))
            {
                if ((c.P[i].v3=='&') && (c.P[i].v4=='&')) t1++;
                if ((c.P[i].v3!='&') && (c.P[i].v4=='&')){if (c.P[indice_pion(c.P[i].v3,c)].joueur!=0) t1++;}
                if ((c.P[i].v3!='&') && (c.P[i].v4!='&')){if ((c.P[indice_pion(c.P[i].v3,c)].joueur!=0) && (c.P[indice_pion(c.P[i].v4,c)].joueur!=0)) t1++;}
                //la variable v1 signifie le nombre de pions bloqu�s pour le joueur 1
            }
        }
    }

    if (t1==c.pos1 ) {return 1;}else{return 0;}

}

///v�rifie s'il n'y a pas de mouvement pour le joueur
int pas_de_mouvement2(etat c){
    int i;
    int t2 = 0;
    for (i=0;i<24;i++){
     if (c.P[i].joueur==2){
            if ((c.P[indice_pion(c.P[i].v1,c)].joueur!=0) && (c.P[indice_pion(c.P[i].v2,c)].joueur!=0))
            {
                if ((c.P[i].v3=='&') && (c.P[i].v4=='&')) t2++;
                if ((c.P[i].v3!='&') && (c.P[i].v4=='&')){if (c.P[indice_pion(c.P[i].v3,c)].joueur!=0) t2++;}
                if ((c.P[i].v3!='&') && (c.P[i].v4!='&')){if ((c.P[indice_pion(c.P[i].v3,c)].joueur!=0) && (c.P[indice_pion(c.P[i].v4,c)].joueur!=0)) t2++;}
                //la variable v2 signifie le nombre de pions restants pour le joueur 2

            }
        }
    }
    if (t2==c.pos2 ) {return 1;}else{return 0;}

}

///copier un etat dans un autre etat
void copier(etat source, etat *copie)
{
    copie->pC=source.pC;
    copie->presd=source.pC;
    copie->ce=source.ce;
    copie->pos=source.pos;
    copie->pos1=source.pos1;
    copie->pos2=source.pos2;
    for(int i=0; i<24 ;i++){
        copie->P[i].joueur=source.P[i].joueur;
        copie->P[i].couleur= source.P[i].couleur;
        copie->P[i].lettre = source.P[i].lettre;
        copie->P[i].v1=source.P[i].v1;
        copie->P[i].v2=source.P[i].v2;
        copie->P[i].v3=source.P[i].v3;
        copie->P[i].v4=source.P[i].v1;
    }
    /*for(int i=0;i<16;i++)
    {
        copie->M[i].j=source.M[i].j;
        copie->M[i].p1=source.M[i].p1;
        copie->M[i].p2=source.M[i].p2;
        copie->M[i].p3=source.M[i].p3;
    }*/
}

///la fonction heuristique
etat h(etat c)
{
    int nb1=0,nb2=0;
    for(int i=0; i<24 ; i++)
    {
        if(c.P[i].joueur==1)nb1++;
        if(c.P[i].joueur==2)nb2++;
        if(c.P[i].joueur==0&&moulin_fnc(c.P,i,1)==0)nb1+=3;
        if(c.P[i].joueur==0&&moulin_fnc(c.P,i,2)==0)nb2+=3;
        if(moulin_fnc(c.P,i,1)==0)nb1+=10;
        if(moulin_fnc(c.P,i,2)==0)nb2+=10;
    }
    c.ce=nb1-nb2;
    return c;
}

///La strat�gie Minimax
etat Minimax(etat e, int p, int pions_a_placer, bool TourMax )
{
    if( p<=0)
    {
        return h(e);
    }
    if(pions_a_placer >18)
    {
        if( pas_de_mouvement1(e) ||e.pos1 ==2)
        {
            e.ce = -1000;
            return e;
        }
        if( pas_de_mouvement2(e) || e.pos2 ==2)
        {
            e.ce = 1000;
            return e;
        }
    }
    if(TourMax)
    {
        p--;
        pions_a_placer++;
        etat eMax;
        copier(e,&eMax) ;
        eMax.ce = -100000;
        eMax.pC=-1;
        if(pions_a_placer <= 18 )
        {
            for ( int i=0 ; i<24 ; i++)
            {
                if(e.P[i].joueur==0)
                {
                    n++;
                    etat eCourant;
                    etat eAide;
                    copier(e, &eCourant);
                    eCourant.P[i].joueur=1;
                    eCourant.P[i].couleur = 9;
                    eCourant.pos = i ;
                    eCourant.pC=-1;
                    if( moulin_fnc(eCourant.P,eCourant.pos ,1)==0)
                    {
                        for(int j=0; j<24 ; j++)
                        {
                            if(e.P[j].joueur == 2 && !( moulin_fnc(eCourant.P,j ,2)==0) )
                            {
                                n++;
                                eCourant.P[j].joueur = 0;
                                eCourant.P[j].couleur = 0;
                                e.pos2--;
                                eAide = Minimax(eCourant,p-1, pions_a_placer -1, !TourMax);
                                eAide.pC = j;
                                eAide.pos = i ;
                            }
                        }
                    }
                    else
                    {
                        eAide = Minimax(eCourant, p, pions_a_placer, !TourMax );
                        eAide.pos = i ;
                        eAide.pC = -1;
                    }
                    if(eMax.ce < eAide.ce)
                    {
                        eMax.ce  = eAide.ce;
                        eMax.pos = i;
                        eMax.pC= eAide.pC;
                    }
                }
            }
            return eMax;
        }
        else
        {
            for(int k=0 ; k<24 ; k++)
            {
                if(e.P[k].joueur==1){
                    for(int i = 0 ; i<24; i++)
                    {
                        if(Voisinages(k,i,e,1)==0&&e.P[i].joueur==0)
                        {
                            n++;
                            etat eCourant;
                            etat eAide;
                            copier(e, &eCourant);
                            eCourant.P[k].joueur = 0;
                            eCourant.P[k].couleur = 0;
                            eCourant.P[i].joueur = 1;
                            eCourant.P[i].couleur = 9;
                            eCourant.pos = i ;
                            eCourant.presd = k;
                            eCourant.pC=-1;
                            if(moulin_fnc(eCourant.P,eCourant.pos ,1)==0)
                            {
                                for( int j = 0 ; j<24 ; j++)
                                {
                                    if(e.P[j].joueur == 2 && !( moulin_fnc(eCourant.P,j ,2)==0) )
                                    {
                                        n++;
                                        eCourant.P[j].joueur = 0;
                                        eCourant.P[j].couleur = 0;
                                        eCourant.pos2--;
                                        eAide = Minimax(eCourant,p-1, pions_a_placer -1, !TourMax);
                                        eAide.pC = j;
                                        eAide.pos = i ;
                                    }
                                }
                            }
                            else
                            {
                                eAide = Minimax(eCourant, p, pions_a_placer, !TourMax );
                                eAide.pos = i ;
                                eAide.pC = -1;
                            }
                            if(eMax.ce < eAide.ce)
                            {
                                eMax.ce  = eAide.ce;
                                eMax.pos = i;
                                eMax.presd = k ;
                                eMax.pC= eAide.pC;
                            }
                        }
                    }
                }

            }
            return eMax;
        }
    }
    else
    {
        p--;
        pions_a_placer++;
        etat eMin;
        copier(e,&eMin) ;
        eMin.ce = 100000;
        eMin.pC=-1;
        if(pions_a_placer <= 18 )
        {
            for ( int i=0 ; i<24 ; i++)
            {
                if(e.P[i].joueur==0)
                {
                    n++;
                    etat eCourant;
                    etat eAide;
                    copier(e, &eCourant);
                    eCourant.P[i].joueur=2;
                    eCourant.P[i].couleur = 12;
                    eCourant.pos = i ;
                    eCourant.pC=-1;
                    if( moulin_fnc(eCourant.P,eCourant.pos ,2)==0)
                    {
                        for(int j=0; j<24 ; j++)
                        {
                            if(e.P[j].joueur == 1 && !( moulin_fnc(eCourant.P,j ,1)==0) )
                            {
                                n++;
                                eCourant.P[j].joueur = 0;
                                eCourant.P[j].couleur = 0;
                                eCourant.pos1--;
                                eAide = Minimax(eCourant,p-1, pions_a_placer -1, !TourMax);
                                eAide.pC = j;
                                eAide.pos = i ;
                            }
                        }
                    }
                    else
                    {
                        eAide = Minimax(eCourant, p, pions_a_placer, !TourMax );
                        eAide.pos = i ;
                        eAide.pC = -1;
                    }
                    if(eMin.ce > eAide.ce)
                    {
                        eMin.ce  = eAide.ce;
                        eMin.pos = i;
                        eMin.pC= eAide.pC;
                    }
                }
            }
            return eMin;
        }
        else
        {
            for(int k=0 ; k<24 ; k++)
            {
                if(e.P[k].joueur==2){
                    for(int i = 0 ; i<24; i++)
                    {
                        if(Voisinages(k,i,e,2)==0&&e.P[i].joueur==0)
                        {
                            n++;
                            etat eCourant;
                            etat eAide;
                            copier(e, &eCourant);
                            eCourant.P[k].joueur = 0;
                            eCourant.P[k].couleur = 0;
                            eCourant.P[i].joueur = 2;
                            eCourant.P[i].couleur = 12;
                            eCourant.pos = i ;
                            eCourant.presd = k;
                            eCourant.pC=-1;
                            if(moulin_fnc(eCourant.P,eCourant.pos ,2)==0)
                            {
                                for( int j = 0 ; j<24 ; j++)
                                {
                                    if(e.P[j].joueur == 1 && !( moulin_fnc(eCourant.P,j ,1)==0) )
                                    {
                                        n++;
                                        eCourant.P[j].joueur = 0;
                                        eCourant.P[j].couleur = 0;
                                        eCourant.pos1--;
                                        eAide = Minimax(eCourant,p-1, pions_a_placer -1, !TourMax);
                                        eAide.pC = j;
                                        eAide.pos = i ;
                                    }
                                }
                            }
                            else
                            {
                                eAide = Minimax(eCourant, p, pions_a_placer, !TourMax );
                                eAide.pos = i ;
                                eAide.pC = -1;
                            }
                            if(eMin.ce > eAide.ce)
                            {
                                eMin.ce  = eAide.ce;
                                eMin.pos = i;
                                eMin.presd = k ;
                                eMin.pC= eAide.pC;
                            }
                        }
                    }
                }

            }
            return eMin;
        }
    }
}

///La strat�gie AlphaBeta
etat AlphaBeta(etat e, int p, int pions_a_placer, bool TourMax ,int a, int b)
{
    if( p<=0)
    {
        return h(e);
    }
    if(pions_a_placer >18)
    {
        if( pas_de_mouvement1(e) ||e.pos1 ==2)
        {
            e.ce = -1000;
            return e;
        }
        if( pas_de_mouvement2(e) || e.pos2 ==2)
        {
            e.ce = 1000;
            return e;
        }
    }
    if(TourMax)
    {
        p--;
        pions_a_placer++;
        etat eMax;
        copier(e,&eMax) ;
        eMax.ce = -100000;
        eMax.pC=-1;
        if(pions_a_placer <= 18 )
        {
            for ( int i=0 ; i<24 ; i++)
            {
                if(e.P[i].joueur==0)
                {
                    n++;
                    etat eCourant;
                    etat eAide;
                    copier(e, &eCourant);
                    eCourant.P[i].joueur=1;
                    eCourant.P[i].couleur = 9;
                    eCourant.pos = i ;
                    if( moulin_fnc(eCourant.P,eCourant.pos ,1)==0)
                    {
                        for(int j=0; j<24 ; j++)
                        {
                            if(e.P[j].joueur == 2 && !( moulin_fnc(eCourant.P,j ,2)==0) )
                            {
                                n++;
                                eCourant.P[j].joueur = 0;
                                eCourant.P[j].couleur = 0;
                                e.pos2--;
                                eAide = AlphaBeta(eCourant,p-1, pions_a_placer -1, !TourMax, a, b);
                                eAide.pC = j;
                                eAide.pos = i ;
                            }
                        }
                    }
                    else
                    {
                        eAide = AlphaBeta(eCourant, p, pions_a_placer, !TourMax, a, b);
                        eAide.pos = i ;
                        eAide.pC = -1;
                    }
                    if(eMax.ce < eAide.ce)
                    {
                        eMax.ce  = eAide.ce;
                        eMax.pos = i;
                        eMax.pC= eAide.pC;
                    }
                    if( a < eAide.ce)
                        a = eAide.ce;
                    if( a >= b)
                        i=25;
                }
            }
            return eMax;
        }
        else
        {
            for(int k=0 ; k<24 ; k++)
            {
                if(e.P[k].joueur==1){
                    for(int i = 0 ; i<24; i++)
                    {
                        if(Voisinages(k,i,e,1)==0&&e.P[i].joueur==0)
                        {
                            n++;
                            etat eCourant;
                            etat eAide;
                            copier(e, &eCourant);
                            eCourant.P[k].joueur = 0;
                            eCourant.P[k].couleur = 0;
                            eCourant.P[i].joueur = 1;
                            eCourant.P[i].couleur = 9;
                            eCourant.pos = i ;
                            eCourant.presd = k;
                            if(moulin_fnc(eCourant.P,eCourant.pos ,1)==0)
                            {
                                for( int j = 0 ; j<24 ; j++)
                                {
                                    if(e.P[j].joueur == 2 && !( moulin_fnc(eCourant.P,j ,2)==0) )
                                    {
                                        n++;
                                        eCourant.P[j].joueur = 0;
                                        eCourant.P[j].couleur = 0;
                                        eCourant.pos2--;
                                        eAide = AlphaBeta(eCourant,p-1, pions_a_placer -1, !TourMax, a, b);
                                        eAide.pC = j;
                                        eAide.pos = i ;
                                    }
                                }
                            }
                            else
                            {
                                eAide = AlphaBeta(eCourant, p, pions_a_placer, !TourMax, a, b);
                                eAide.pos = i ;
                                eAide.pC = -1;
                            }
                            if(eMax.ce < eAide.ce)
                            {
                                eMax.ce  = eAide.ce;
                                eMax.pos = i;
                                eMax.presd = k ;
                                eMax.pC= eAide.pC;
                            }
                            if( a < eAide.ce)
                                a = eAide.ce;
                            if( a >= b)
                                i=25;
                        }
                    }
                }

            }
            return eMax;
        }
    }
    else
    {
        p--;
        pions_a_placer++;
        etat eMin;
        copier(e,&eMin) ;
        eMin.ce = 100000;
        eMin.pC=-1;
        if(pions_a_placer <= 18 )
        {
            for ( int i=0 ; i<24 ; i++)
            {
                if(e.P[i].joueur==0)
                {
                    n++;
                    etat eCourant;
                    etat eAide;
                    copier(e, &eCourant);
                    eCourant.P[i].joueur=2;
                    eCourant.P[i].couleur = 12;
                    eCourant.pos = i ;
                    if(moulin_fnc(eCourant.P,eCourant.pos ,2)==0)
                    {
                        for(int j=0; j<24 ; j++)
                        {
                            if(e.P[j].joueur == 1 && !( moulin_fnc(eCourant.P,j ,1)==0) )
                            {
                                n++;
                                eCourant.P[j].joueur = 0;
                                eCourant.P[j].couleur = 0;
                                eCourant.pos1--;
                                eAide = AlphaBeta(eCourant,p-1, pions_a_placer -1, !TourMax, a, b);
                                eAide.pC = j;
                                eAide.pos = i ;
                            }
                        }
                    }
                    else
                    {
                        eAide = AlphaBeta(eCourant, p, pions_a_placer, !TourMax, a, b);
                        eAide.pos = i ;
                        eAide.pC = -1;
                    }
                    if(eMin.ce > eAide.ce)
                    {
                        eMin.ce  = eAide.ce;
                        eMin.pos = i;
                        eMin.pC= eAide.pC;
                    }
                    if( b > eAide.ce)
                        b = eAide.ce;
                    if( a >= b)
                        i=25;
                }
            }
            return eMin;
        }
        else
        {
            for(int k=0 ; k<24 ; k++)
            {
                if(e.P[k].joueur==2){
                    for(int i = 0 ; i<24; i++)
                    {
                        if(Voisinages(k,i,e,2)==0&&e.P[i].joueur==0)
                        {
                            n++;
                            etat eCourant;
                            etat eAide;
                            copier(e, &eCourant);
                            eCourant.P[k].joueur = 0;
                            eCourant.P[k].couleur = 0;
                            eCourant.P[i].joueur = 2;
                            eCourant.P[i].couleur = 12;
                            eCourant.pos = i ;
                            eCourant.presd = k;
                            if(moulin_fnc(eCourant.P,eCourant.pos ,2)==0)
                            {
                                for( int j = 0 ; j<24 ; j++)
                                {
                                    if(e.P[j].joueur == 1 && !( moulin_fnc(eCourant.P,j ,1)==0) )
                                    {
                                        n++;
                                        eCourant.P[j].joueur = 0;
                                        eCourant.P[j].couleur = 0;
                                        eCourant.pos1--;
                                        eAide = AlphaBeta(eCourant,p-1, pions_a_placer -1, !TourMax, a, b);
                                        eAide.pC = j;
                                        eAide.pos = i ;
                                    }
                                }
                            }
                            else
                            {
                                eAide = AlphaBeta(eCourant, p, pions_a_placer, !TourMax, a, b);
                                eAide.pos = i ;
                                eAide.pC = -1;
                            }
                            if(eMin.ce > eAide.ce)
                            {
                                eMin.ce  = eAide.ce;
                                eMin.pos = i;
                                eMin.presd = k ;
                                eMin.pC= eAide.pC;
                            }
                            if( b > eAide.ce)
                                b = eAide.ce;
                            if( a >= b)
                                i=25;
                        }
                    }
                }

            }
            return eMin;
        }
    }
}


///verifie s'il y a un moulin dans une position
int moulin_fnc(place *UnPlateau,int position ,int Pion)
{
    int moulin=-1;
    switch(position){
        case 0 : if((UnPlateau[9].joueur==Pion&&UnPlateau[21].joueur==Pion)||(UnPlateau[1].joueur==Pion&&UnPlateau[2].joueur==Pion)) moulin=0;break;
        case 1 : if((UnPlateau[7].joueur==Pion&&UnPlateau[4].joueur==Pion)||(UnPlateau[0].joueur==Pion&&UnPlateau[2].joueur==Pion)) moulin=0;break;
        case 2 : if((UnPlateau[14].joueur==Pion&&UnPlateau[23].joueur==Pion)||(UnPlateau[0].joueur==Pion&&UnPlateau[1].joueur==Pion)) moulin=0;break;
        case 3 : if((UnPlateau[10].joueur==Pion&&UnPlateau[18].joueur==Pion)||(UnPlateau[4].joueur==Pion&&UnPlateau[5].joueur==Pion)) moulin=0;break;
        case 4 : if((UnPlateau[1].joueur==Pion&&UnPlateau[7].joueur==Pion)||(UnPlateau[3].joueur==Pion&&UnPlateau[5].joueur==Pion)) moulin=0;break;
        case 5 : if((UnPlateau[13].joueur==Pion&&UnPlateau[20].joueur==Pion)||(UnPlateau[3].joueur==Pion&&UnPlateau[4].joueur==Pion)) moulin=0;break;
        case 6 : if((UnPlateau[11].joueur==Pion&&UnPlateau[15].joueur==Pion)||(UnPlateau[7].joueur==Pion&&UnPlateau[8].joueur==Pion)) moulin=0;break;
        case 7 : if((UnPlateau[1].joueur==Pion&&UnPlateau[4].joueur==Pion)||(UnPlateau[6].joueur==Pion&&UnPlateau[8].joueur==Pion)) moulin=0;break;
        case 8 : if((UnPlateau[12].joueur==Pion&&UnPlateau[17].joueur==Pion)||(UnPlateau[6].joueur==Pion&&UnPlateau[7].joueur==Pion)) moulin=0;break;
        case 9 : if((UnPlateau[0].joueur==Pion&&UnPlateau[21].joueur==Pion)||(UnPlateau[10].joueur==Pion&&UnPlateau[11].joueur==Pion)) moulin=0;break;
        case 10 : if((UnPlateau[3].joueur==Pion&&UnPlateau[18].joueur==Pion)||(UnPlateau[9].joueur==Pion&&UnPlateau[11].joueur==Pion)) moulin=0;break;
        case 11 : if((UnPlateau[6].joueur==Pion&&UnPlateau[15].joueur==Pion)||(UnPlateau[9].joueur==Pion&&UnPlateau[10].joueur==Pion)) moulin=0;break;
        case 12 : if((UnPlateau[8].joueur==Pion&&UnPlateau[17].joueur==Pion)||(UnPlateau[13].joueur==Pion&&UnPlateau[14].joueur==Pion)) moulin=0;break;
        case 13 : if((UnPlateau[5].joueur==Pion&&UnPlateau[20].joueur==Pion)||(UnPlateau[12].joueur==Pion&&UnPlateau[14].joueur==Pion)) moulin=0;break;
        case 14 : if((UnPlateau[2].joueur==Pion&&UnPlateau[23].joueur==Pion)||(UnPlateau[12].joueur==Pion&&UnPlateau[13].joueur==Pion)) moulin=0;break;
        case 15 : if((UnPlateau[6].joueur==Pion&&UnPlateau[11].joueur==Pion)||(UnPlateau[16].joueur==Pion&&UnPlateau[17].joueur==Pion)) moulin=0;break;
        case 16 : if((UnPlateau[19].joueur==Pion&&UnPlateau[22].joueur==Pion)||(UnPlateau[15].joueur==Pion&&UnPlateau[17].joueur==Pion)) moulin=0;break;
        case 17 : if((UnPlateau[8].joueur==Pion&&UnPlateau[12].joueur==Pion)||(UnPlateau[15].joueur==Pion&&UnPlateau[16].joueur==Pion)) moulin=0;break;
        case 18 : if((UnPlateau[3].joueur==Pion&&UnPlateau[10].joueur==Pion)||(UnPlateau[19].joueur==Pion&&UnPlateau[20].joueur==Pion)) moulin=0;break;
        case 19 : if((UnPlateau[16].joueur==Pion&&UnPlateau[22].joueur==Pion)||(UnPlateau[18].joueur==Pion&&UnPlateau[20].joueur==Pion)) moulin=0;break;
        case 20 : if((UnPlateau[5].joueur==Pion&&UnPlateau[13].joueur==Pion)||(UnPlateau[18].joueur==Pion&&UnPlateau[19].joueur==Pion)) moulin=0;break;
        case 21 : if((UnPlateau[0].joueur==Pion&&UnPlateau[9].joueur==Pion)||(UnPlateau[22].joueur==Pion&&UnPlateau[23].joueur==Pion)) moulin=0;break;
        case 22 : if((UnPlateau[16].joueur==Pion&&UnPlateau[19].joueur==Pion)||(UnPlateau[21].joueur==Pion&&UnPlateau[23].joueur==Pion)) moulin=0;break;
        case 23 : if((UnPlateau[2].joueur==Pion&&UnPlateau[14].joueur==Pion)||(UnPlateau[21].joueur==Pion&&UnPlateau[22].joueur==Pion)) moulin=0;break;
    }
    return moulin;
}

///retourne 1 si un joueur a une possibilit� de d�placer dans la grille et 0 sinon
int Voisinages(int source,int PositionTest,etat c,int joueur)
{
    switch(source){
        case 0 : if(PositionTest==1||PositionTest==9)return 0;break;
        case 1 : if(PositionTest==0||PositionTest==2||PositionTest==4)return 0;break;
        case 2 : if(PositionTest==1||PositionTest==14)return 0;break;
        case 3 : if(PositionTest==4||PositionTest==10)return 0;break;
        case 4 : if(PositionTest==1||PositionTest==3||PositionTest==5||PositionTest==7)return 0;break;
        case 5 : if(PositionTest==4||PositionTest==13)return 0;break;
        case 6 : if(PositionTest==7||PositionTest==11)return 0;break;
        case 7 : if(PositionTest==4||PositionTest==6||PositionTest==8)return 0;break;
        case 8 : if(PositionTest==7||PositionTest==12)return 0;break;
        case 9 : if(PositionTest==0||PositionTest==10||PositionTest==21)return 0;break;
        case 10 : if(PositionTest==3||PositionTest==9||PositionTest==11||PositionTest==18)return 0;break;
        case 11 : if(PositionTest==6||PositionTest==10||PositionTest==15)return 0;break;
        case 12 : if(PositionTest==8||PositionTest==13||PositionTest==17)return 0;break;
        case 13 : if(PositionTest==5||PositionTest==12||PositionTest==14||PositionTest==20)return 0;break;
        case 14 : if(PositionTest==2||PositionTest==13||PositionTest==23)return 0;break;
        case 15 : if(PositionTest==11||PositionTest==16)return 0;break;
        case 16 : if(PositionTest==15||PositionTest==17||PositionTest==19)return 0;break;
        case 17 : if(PositionTest==12||PositionTest==16)return 0;break;
        case 18 : if(PositionTest==10||PositionTest==19)return 0;break;
        case 19 : if(PositionTest==16||PositionTest==18||PositionTest==20||PositionTest==22)return 0;break;
        case 20 : if(PositionTest==13||PositionTest==19)return 0;break;
        case 21 : if(PositionTest==9||PositionTest==22)return 0;break;
        case 22 : if(PositionTest==19||PositionTest==21||PositionTest==23)return 0;break;
        case 23 : if(PositionTest==14||PositionTest==22)return 0;break;

    }
    if(joueur==1){
        if(c.pos1<=3)return 0;
    }
    if(joueur==2){
        if(c.pos2<=3)return 0;
    }
    return -1;
}

int pion_libre(place *UnPlateau)
{
    int Choix=-1;
        for(int i=0 ;i<24 ;i++){
            if(UnPlateau[i].joueur==1)
            if(moulin_fnc(UnPlateau,i,1)==-1){
                Choix=0;
                i=24;
            }
        }
        if(Choix==-1) {
            printf("l'adversaire n'a que des moulin, vous pouver pas capturer un pion");
        }
        return Choix;
}
#ifndef GAME_H
#define GAME_H
#include<stdbool.h>

#include "../include/structure.h"
int indice_pion(char c ,etat e);
int pas_de_mouvement1(etat c);
int pas_de_mouvement2(etat c);
void copier(etat source, etat *copie);
etat h(etat c);
etat Minimax(etat e , int p , int pions_a_placer, bool TourMax );
etat AlphaBeta(etat e, int p, int pions_a_placer, bool TourMax ,int a, int b);
int moulin_fnc(place *UnPlateau,int position ,int Pion);
int Voisinages(int source,int PositionTest,etat c, int joueur);
 int pion_libre(place* P);
#endif // SDL2_H
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <windows.h>
#include "../include/grille.h"
#include "../include/structure.h"
#include "../include/game.h"

int Initialiser()
{
    int choix;
    printf("Choisir de jouer avec l'ordinateur :\n");
    printf("1 - MinMax\n");
    printf("2 - AlphaBeta\n");
    scanf("%d", &choix);
    return choix;
}
// Fonction pour changer la couleur du texte et du fond
void color(int couleurDuTEXTE, int couleurDeFond)
{
    HANDLE H = GetStdHandle(STD_OUTPUT_HANDLE);
    SetConsoleTextAttribute(H, couleurDeFond * 16 + couleurDuTEXTE);
}

// Fonction pour afficher la grille avec couleur
void co(int i, etat *e)
{
    if (e->P[i].joueur == 0)
        color(15, 0);
    else if (e->P[i].joueur == 1)
        color(4, 4);
    else if (e->P[i].joueur == 2)
        color(2, 2);
}

void afficherGrille(etat e)
{
    etat ETAT;
    copier(e, &ETAT);

    printf("\n\n\n");
    printf("\t\t\t ");
    co(0, &ETAT);
    printf("|00|");
    color(15, 0);
    printf("=======================");
    co(1, &ETAT);
    printf("|01|");
    color(15, 0);
    printf("=======================");
    co(2, &ETAT);
    printf("|02|\n");
    color(15, 0);
    printf("\t\t\t  |  \t\t\t     |  \t\t        |\n");
    printf("\t\t\t  |\t\t\t     |  \t\t        |\n");
    printf("\t\t\t  |\t\t\t     |  \t\t        |\n");
    printf("\t\t\t  |         ");
    co(3, &ETAT);
    printf("|03|");
    color(15, 0);
    printf("============");
    co(4, &ETAT);
    printf("|04|");
    color(15, 0);
    printf("============");
    co(5, &ETAT);
    printf("|05|");
    color(15, 0);
    printf("        |\n");
    printf("\t\t\t  |          |               |               |          |\n");
    printf("\t\t\t  |          |               |               |          |\n");
    printf("\t\t\t  |          |               |               |          |\n");
    printf("\t\t\t  |          |    ");
    co(6, &ETAT);
    printf("|06|");
    color(15, 0);
    printf("======");
    co(7, &ETAT);
    printf("|07|");
    color(15, 0);
    printf("=====");
    co(8, &ETAT);
    printf("|08|");
    color(15, 0);
    printf("    |          |\n");
    printf("\t\t\t  |          |     |                  |      |          |\n");
    printf("\t\t\t  |          |     |                  |      |          |\n");
    printf("\t\t\t  |          |     |                  |      |          |\n");
    printf("\t\t\t ");
    co(9, &ETAT);
    printf("|09|");
    color(15, 0);
    printf("=======");
    co(10, &ETAT);
    printf("|10|");
    color(15, 0);
    printf("==");
    co(11, &ETAT);
    printf("|11|");
    color(15, 0);
    printf("               ");
    co(12, &ETAT);
    printf("|12|");
    color(15, 0);
    printf("==");
    co(13, &ETAT);
    printf("|13|");
    color(15, 0);
    printf("========");
    co(14, &ETAT);
    printf("|14|");
    printf("\n");
    color(15, 0);
    printf("\t\t\t  |          |     |                  |      |          |\n");
    printf("\t\t\t  |          |     |                  |      |          |\n");
    printf("\t\t\t  |          |     |                  |      |          |\n");
    color(15, 0);
    printf("\t\t\t  |          |    ");
    co(15, &ETAT);
    printf("|15|");
    color(15, 0);
    printf("======");
    co(16, &ETAT);
    printf("|16|");
    color(15, 0);
    printf("=====");
    co(17, &ETAT);
    printf("|17|");
    color(15, 0);
    printf("    |          |\n");
    printf("\t\t\t  |          |                |              |          |\n");
    printf("\t\t\t  |          |                |              |          |\n");
    printf("\t\t\t  |          |                |              |          |\n");
    color(15, 0);
    printf("\t\t\t  |         ");
    co(18, &ETAT);
    printf("|18|");
    color(15, 0);
    printf("============");
    co(19, &ETAT);
    printf("|19|");
    color(15, 0);
    printf("============");
    co(20, &ETAT);
    printf("|20|");
    color(15, 0);
    printf("        |\n");
    printf("\t\t\t  |\t\t\t      |  \t\t        |\n");
    printf("\t\t\t  |\t\t\t      |  \t\t        |\n");
    printf("\t\t\t  |\t\t\t      |  \t\t        |\n");
    printf("\t\t\t ");
    co(21, &ETAT);
    printf("|21|");
    color(15, 0);
    printf("=======================");
    co(22, &ETAT);
    printf("|22|");
    color(15, 0);
    printf("=======================");
    co(23, &ETAT);
    printf("|23|\n");
    color(15, 0);
}
int entrer_utilisateur(int joueur, etat e)
{
    int choix = -1;
    int choix_utilisateur = Initialiser();

    while (choix == -1 || e.P[choix].joueur != joueur)
    {
        afficherGrille(e);

        printf("entrer la case \n");
        scanf("%d", &choix);
    }
    return choix;
}

void afficher(etat e, int i)
{

    if (e.P[i].joueur == 1)
    {
        system("cls");
        afficherGrille(e);
    }

    if (e.P[i].joueur == 2)
    {
        system("cls");
        afficherGrille(e);
    }
    system("cls");
}

void beginmain(etat e)
{
    etat em;

    printf("Jeu de moulin\n");
    int mama;
    printf("1 - MinMax Minmax\n\n");
    printf("2 - Alpha-beta1 Alpha-beta1\n\n");
    printf("3 - Quitter\n\n");
    scanf("%d", &mama);

    bool fermer = false;

    while (!fermer)
    {
        switch (mama)
        {
        case 1:
            printf("tu as choixi mainmax:\n");

            afficherGrille(e);
            for (int i = 0; i < 9; i++)
            {
                int choix;
                choix = entrer_utilisateur(0, e);

                e.P[choix].joueur = 2;
                printf("Vous avez choisi la position : %d\n", choix);
                if (moulin_fnc(e.P, choix, 2) == 0)
                {
                    if (pion_libre(e.P) == 0)
                    {
                        do
                        {
                            choix = entrer_utilisateur(1, e);
                        } while (moulin_fnc(e.P, choix, 1) == 0);

                        printf("Vous avez capture le pion : %d\n", choix);
                        e.P[choix].joueur = 0;
                        afficherGrille(e);
                        e.pos1--;
                    }
                }
                Nbr_des_pions_poser++;
                em = Minimax(e, 3, Nbr_des_pions_poser, true);

                e.P[em.pos].joueur = 1;
                printf("La machine choisi la position : %d\n", em.pos);
                afficherGrille(e);
                if (em.pC != -1)
                {

                    e.P[em.pC].joueur = 0;
                    printf("La machine a capture le pion : %d\n", em.pC);
                    afficherGrille(e);
                    e.pos2--;
                }
                Nbr_des_pions_poser++;
                printf("\n");
            }
            while (e.pos1 > 2 && e.pos2 > 2 && !pas_de_mouvement1(e) && !pas_de_mouvement2(e))
            {
                int source = -1, destination = -1;
                do
                {
                    source = entrer_utilisateur(2, e);
                    destination = entrer_utilisateur(0, e);
                } while (!(Voisinages(source, destination, e, 2) == 0 && e.P[destination].joueur == 0));

                e.P[source].joueur = 0;
                e.P[destination].joueur = 2;
                printf("Vous avez passez de %d a %d\n", source, destination);
                afficherGrille(e);
                if (moulin_fnc(e.P, destination, 2) == 0)
                {
                    if (pion_libre(e.P) == 0)
                    {
                        int choix;
                        do
                        {
                            choix = entrer_utilisateur(1, e);
                        } while (moulin_fnc(e.P, choix, 1) == 0);

                        e.P[choix].joueur = 0;
                        printf("Vous avez capture le pion : %d\n", choix);
                        afficherGrille(e);
                        e.pos1--;
                    }
                }
                Nbr_des_pions_poser++;
                em = Minimax(e, 3, Nbr_des_pions_poser, true);

                e.P[em.pos].joueur = 1;
                e.P[em.presd].joueur = 0;
                printf("La machine passe de %d a %d\n", em.presd, em.pos);
                afficherGrille(e);
                if (em.pC != -1)
                {

                    e.P[em.pC].joueur = 0;
                    printf("La machine a capture le pion : %d\n", em.pC);
                    afficherGrille(e);
                    e.pos2--;
                }
                Nbr_des_pions_poser++;
                printf("\n");
            }

            afficherGrille(e);

            if (e.pos1 == 2 || pas_de_mouvement1(e))
            {
                printf("tu as gagne\n");
                exit(0);
            }
            else
            {
                printf("tu as echuoe");
                exit(0);
            }
            fermer = true;
            break;
        case 2:
            printf("tu as choixi alphaBeta:\n");

            afficherGrille(e);
            for (int i = 0; i < 9; i++)
            {
                int choix;
                choix = entrer_utilisateur(0, e);

                e.P[choix].joueur = 2;
                printf("Vous avez choisi la position : %d\n", choix);
                afficherGrille(e);
                if (moulin_fnc(e.P, choix, 2) == 0)
                {
                    if (pion_libre(e.P) == 0)
                    {
                        do
                        {
                            choix = entrer_utilisateur(1, e);
                        } while (moulin_fnc(e.P, choix, 1) == 0);

                        e.P[choix].joueur = 0;
                        printf("Vous avez capture le pion : %d\n", choix);
                        afficherGrille(e);
                        e.pos1--;
                    }
                }
                Nbr_des_pions_poser++;

                em = AlphaBeta(e, 3, Nbr_des_pions_poser, true, -999999, 999999);

                e.P[em.pos].joueur = 1;
                printf("La machine choisi la position : %d\n", em.pos);
                afficherGrille(e);
                if (em.pC != -1)
                {

                    e.P[em.pC].joueur = 0;
                    printf("La machine a capture le pion : %d\n", em.pC);
                    afficherGrille(e);
                    e.pos2--;
                }
                Nbr_des_pions_poser++;
            }
            while (e.pos1 > 2 && e.pos2 > 2 && !pas_de_mouvement1(e) && !pas_de_mouvement2(e))
            {
                int source = -1, destination = -1;
                do
                {
                    source = entrer_utilisateur(2, e);
                    destination = entrer_utilisateur(0, e);
                } while (!(Voisinages(source, destination, e, 2) == 0 && e.P[destination].joueur == 0));

                e.P[source].joueur = 0;
                e.P[destination].joueur = 2;
                printf("Vous avez passez de %d a %d\n", source, destination);
                afficherGrille(e);
                if (moulin_fnc(e.P, destination, 2) == 0)
                {
                    if (pion_libre(e.P) == 0)
                    {
                        int choix;
                        do
                        {
                            choix = entrer_utilisateur(1, e);
                        } while (moulin_fnc(e.P, choix, 1) == 0);

                        e.P[choix].joueur = 0;
                        printf("Vous avez capture le pion : %d\n", choix);
                        afficherGrille(e);
                        e.pos1--;
                    }
                }
                Nbr_des_pions_poser++;
                em = AlphaBeta(e, 3, Nbr_des_pions_poser, true, -999999, 999999);

                e.P[em.pos].joueur = 1;
                e.P[em.presd].joueur = 0;
                printf("La machine passe de %d a %d\n", em.presd, em.pos);
                afficherGrille(e);
                if (em.pC != -1)
                {

                    e.P[em.pC].joueur = 0;
                    printf("La machine a capture le pion : %d\n", em.pC);
                    afficherGrille(e);
                    e.pos2--;
                }
                Nbr_des_pions_poser++;
            }

            afficherGrille(e);

            if (e.pos1 == 2 || pas_de_mouvement1(e))
            {
                printf("you win");
                exit(0);
            }
            else
            {
                printf("you lose");
                exit(0);
            }

            fermer = true;
            break;
        case 3:
            fermer = true;
            break;
        default:
            printf("Choix invalide\n");
            break;
        }
    }
}
#ifndef GRILLE_H
#define GRILLE_H

#include "../include/structure.h"

int Initialiser();
void afficheGrille(etat e);
void afficherGrille(etat e);
void BeginJeu(etat e);
int entrer_utilisateur(int Joueur, etat e);
void afficher();
extern int Nbr_des_pions_poser;

#endif // GRILLE_H
#ifndef STRUCT_H_INCLUDED
#define STRUCT_H_INCLUDED


typedef struct place {
    char lettre;
    int joueur;
    int couleur;
    char v1,v2,v3,v4;///voisins de chaque position sur la grille
}place;
typedef struct etat {
    place P[24];
    int pos1; ///nombre de pions sur table
    int pos2;
    int ce; ///cout de chaque etat
    int pos;///position de chaque pion
    int presd;
    int pC;///pion capture de l'adversaire

}etat;
typedef struct Noeud
{
    struct Noeud *suivant;
    etat Etat;
}Noeud;

static int n = 0;

#endif // STRUCT_H_INCLUDED



